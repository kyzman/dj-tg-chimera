import pprint
from enum import IntEnum, auto

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from django.core.paginator import Paginator

from tgbot.settings import ITEMS_IN_PAGE, PREF


class CartActions(IntEnum):
    increase = auto()
    decrease = auto()
    cart_add = auto()


class CartCbData(CallbackData, prefix=PREF.cart_add):
    prev_page: int
    item: int
    quantity: int
    action: CartActions


# –ù–µ —Å—Ç–∞–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å CallBack Factory –¥–ª—è –≤—ã–±–æ—Ä–∞ –ì—Ä—É–ø–ø, –ö–∞—Ç–µ–≥–æ—Ä–∏–π, –¢–æ–≤–∞—Ä–æ–≤ –∏ –í–æ–ø—Ä–æ—Å–æ–≤, —Ç.–∫. –≤—Å–µ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç
# –æ–¥–Ω—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ª–∏—à—å —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏. –†–∞–¥–∏ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å 4 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∞ (—Ç.–∫. –ø—Ä–µ—Ñ–∏–∫—Å –∑–∞–¥–∞—ë—Ç—Å—è –¥–ª—è –∫–ª–∞—Å—Å–∞)
# –∏ 4 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ä–∞–∑–ª–∏—á–∞—é—â–∏–µ—Å—è —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–æ–º —Ñ–∞–±—Ä–∏–∫–∏, —Å—á–∏—Ç–∞—é –Ω–µ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω—ã–º.
def get_catalog_ikb(items: list = None, pref: str = '', page: int = 1, prev=None) -> InlineKeyboardMarkup:
    ikb = InlineKeyboardBuilder()
    nums1 = []
    if items:
        cur_range = Paginator(items, ITEMS_IN_PAGE).get_page(page)
        for item in cur_range:
            ikb.button(text=item.name, callback_data=f"{pref}_select_{item.pk}")
            nums1.append(1)
        nums2 = 4
        if cur_range.has_previous():
            ikb.button(text="<<", callback_data=f"{pref}_page_{cur_range.previous_page_number()}")
        else:
            nums2 -= 1
        if prev:
            ikb.button(text="–ù–∞–∑–∞–¥", callback_data=prev)
        else:
            nums2 -= 1
        ikb.button(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_soft")
        if cur_range.has_next():
            ikb.button(text=">>", callback_data=f"{pref}_page_{cur_range.next_page_number()}")
        else:
            nums2 -= 1
        ikb.adjust(*nums1, nums2)
    else:
        if prev:
            ikb.button(text="–ù–∞–∑–∞–¥", callback_data=prev)
        ikb.button(text="üö´ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π", callback_data="cancel_soft")
    return ikb.as_markup()


def get_item_ikb(data: CartCbData) -> InlineKeyboardMarkup:
    ikb = InlineKeyboardBuilder()
    for label, action in (
            ("+", CartActions.increase),
            ("-", CartActions.decrease),
            ("üõí", CartActions.cart_add),
    ):
        ikb.button(text=label, callback_data=CartCbData(action=action,
                                                        **data.model_dump(include={"prev_page", "item", "quantity"})))
    ikb.adjust(3)
    ikb.button(text="–ù–∞–∑–∞–¥", callback_data=f"{PREF.item}_page_{data.prev_page}")
    ikb.button(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_soft")
    ikb.adjust(2)
    return ikb.as_markup()


def get_cart_ikb(items, pref, page: int = 1) -> InlineKeyboardMarkup:
    ikb = InlineKeyboardBuilder()
    nums1 = []
    if items:
        cur_range = Paginator(items, ITEMS_IN_PAGE).get_page(page)
        for item in cur_range:
            ikb.button(text=f"‚ùå {item.item.name} ({item.qty} —à—Ç.)", callback_data=f"{pref}_del_{item.pk}")
            nums1.append(1)
        nums2 = 4
        if cur_range.has_previous():
            ikb.button(text="<<", callback_data=f"{pref}_page_{cur_range.previous_page_number()}")
        else:
            nums2 -= 1
        ikb.button(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")
        ikb.button(text="üö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data="cancel_soft")
        if cur_range.has_next():
            ikb.button(text=">>", callback_data=f"{pref}_page_{cur_range.next_page_number()}")
        else:
            nums2 -= 1
        ikb.adjust(*nums1, nums2)
    else:
        ikb.button(text="üö´ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", callback_data="cancel_soft")

    return ikb.as_markup()


def payment_ikb(payment_url, payment_id):
    builder = InlineKeyboardBuilder()
    builder.button(
        text='–û–ø–ª–∞—Ç–∏—Ç—å',
        url=payment_url
    )
    builder.button(
        text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
        callback_data=f'check_{payment_id}'
    )
    return builder.as_markup()


def subscribe_ikb(subscribe_url):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=subscribe_url)
    return builder.as_markup()

